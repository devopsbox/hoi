  _   _   _
 / \ / \ / \
( H | O | I )
 \_/ \_/ \_/

---- Bare Metal PaaS


Synopsis
--------
Hoi has been created to ease hosting of the growing number of Atelier Disko
client projects.

"It's as complicated as you want it to be." [0]

Atelier Disko isn't primarly an infrastructure company, so we don't like to
afford maintaining too ambitious solutions. Resources freed from deliberately
choosing a classic shared hosting architechture are re-invested into providing
a stable, secure and performant hosting environment with good resource
utilization.

Our projects are primarly PHP-based web applications. They are distinct in what
they do but pretty uniform in how the are structured and in the technology they
need.

[0] https://twitter.com/alexander_h/status/751470506503798784

-- Hoi is currently in development and until it reaches 1.0, it --
-- should be considered not ready for general production use.   --

Is it for you?
--------------
If your hosting needs are similar and are ready to sacrifice the benefits of
i.e. containers for ease of use or you are running services that are not well
suited for per-project containers (i.e. PHP FPM or MySQL), hoi might also be
something for you.

What's inside?
--------------
Hoi consist of a server (hoid) backend and client (hoictl) to control the
server. It features several modules ("runners") which take care of the needs
of a project.

- "web"
  Serves the project under given domains.
  https://godoc.org/github.com/atelierdisko/hoi/runner#WebRunner

- "php"
  Safely enables per project PHP(1) settings.
  https://godoc.org/github.com/atelierdisko/hoi/runner#PHPRunner

- "cron"
  Starts cron jobs while reducing resource congestion.
  https://godoc.org/github.com/atelierdisko/hoi/runner#CronRunner

- "worker"
  Manages long running worker processes with resource controls.
  https://godoc.org/github.com/atelierdisko/hoi/runner#WorkerRunner

- "database"
  Creates databases and users with minimum set of privileges.
  https://godoc.org/github.com/atelierdisko/hoi/runner#DBRunner


Installation
============
The following handful of commands will install hoi into your system:

$ go get github.com/atelierdisko/hoi
$ cd $GOPATH/src/github.com/atelierdisko/hoi
$ PREFIX= make install
$ cp conf/hoid.service /etc/systemd/system/
$ systemctl enable --now hoid


Project Configuration: The Hoifile
==================================
https://godoc.org/github.com/atelierdisko/hoi/project

The Hoifile defines the needs of a project and provides a minimum
set of configuration. The remaining configuration is discovered
automatically once the project is loaded.

It uses a directive based configuration syntax similar to the NGINX
configuration files.

To load a project, it must contain a Hoifile:
$ cd /var/www/foo
$ hoictl load

Already loaded configuration can be manipulated i.e. by adding an
alias to a domain:
$ hoictl domain example.org --alias=example.com

A minimal Hoifile has 3 lines:
name = "example"
context = "prod"
domain example.org {}

A more advanced Hoifile might look like this:
name = "example"
context = "prod"
domain example.org {
	SSL = {
		certificate = "config/ssl/example.org.crt"
		certificateKey = "config/ssl/example.org.key"
	}
	aliases = ["example.com", "example.net"]
}
database example {
	password = "s3cret"
}
cron reporter {
	schedule = "daily"
	command = "bin/compile-report"
}
worker media-processor {
	instances = 2
	command = "bin/process-media"
}

Server Configuration: hoid.conf
===============================
https://godoc.org/github.com/atelierdisko/hoi/server

Customizing Service Templates
-----------------------------
The templates used by hoid to generate service configuration can be customized,
they reside inside conf/templates and use Go Template[0] syntax.

[0] https://golang.org/pkg/text/template/


Copyright & License
===================
Hoi is Copyright (c) 2016 Atelier Disko if not otherwise
stated. Use of the source code is governed by a BSD-style
license that can be found in the LICENSE file.


Versions & Requirements
=======================
The Go language >= 1.6 is required to build the project.

Hoi is continously tested on Linux and Darwin.

The web runner requires nginx(8)
  The default template for NGINX will log to syslog/journald. This feature is
  available in NGINX >= 1.7.1. To lower this version requirement the "useLegacy"
  option can be enabled (which will log to STDERR instead).

The cron runner requires systemd(1)
The worker runner requires systemd(1)
  Recent systemd versions are always supported, older ones (i.e. 215) are
  probably supported via the "useLegacy" option.

The PHP runner requires PHP(1)
  If you don't enable this runner you can drop this requirement.


Development
===========
Hoi comes with a small test environment to conduct manual testing.

$ go get github.com/atelierdisko/hoi
$ cd $GOPATH/src/github.com/atelierdisko/hoi
$ make test

Future Scope
------------
Hoi currently relies on a fixed set of technologies (see requirements) to do its
job. However, changing this and implementing an abstraction layer with adapters
are a possible future goal.

Other planned runners are:
- "backup"
  Uses rsnapshot(1) to produce daily/weekly/monthly backups from your project
  directory. If available will also include a dump of attached databases.
  Generated snapshots may be pushed offsite via SSH.

- "seal"
  Uses the mtree(8) utility to generate so called manifests of your projects
  contents and will regularly check the project against that manifest to detect
  possible tampering.

- "log"
